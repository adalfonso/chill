/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of InvitationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`. To avoid conflicts with model names, use the type alias `InvitationObject`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type Invitation = {
  email: string;
  _id: mongoose.Types.ObjectId;
  updated_at?: Date;
  created_at?: Date;
};

/**
 * Lean version of InvitationDocument (type alias of `Invitation`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Invitation } from "../models"
 * import { InvitationObject } from "../interfaces/mongoose.gen.ts"
 *
 * const invitationObject: InvitationObject = invitation.toObject();
 * ```
 */
export type InvitationObject = Invitation;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type InvitationQuery = mongoose.Query<
  any,
  InvitationDocument,
  InvitationQueries
> &
  InvitationQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `InvitationSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type InvitationQueries = {};

export type InvitationMethods = {};

export type InvitationStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Invitation = mongoose.model<InvitationDocument, InvitationModel>("Invitation", InvitationSchema);
 * ```
 */
export type InvitationModel = mongoose.Model<
  InvitationDocument,
  InvitationQueries
> &
  InvitationStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Invitation schema instances:
 * ```
 * const InvitationSchema: InvitationSchema = new mongoose.Schema({ ... })
 * ```
 */
export type InvitationSchema = mongoose.Schema<
  InvitationDocument,
  InvitationModel,
  InvitationMethods,
  InvitationQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Invitation = mongoose.model<InvitationDocument, InvitationModel>("Invitation", InvitationSchema);
 * ```
 */
export type InvitationDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  InvitationQueries
> &
  InvitationMethods & {
    email: string;
    _id: mongoose.Types.ObjectId;
    updated_at?: Date;
    created_at?: Date;
  };

/**
 * Lean version of MediaDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MediaDocument.toObject()`. To avoid conflicts with model names, use the type alias `MediaObject`.
 * ```
 * const mediaObject = media.toObject();
 * ```
 */
export type Media = {
  _id: mongoose.Types.ObjectId;
  path: string;
  duration: number;
  artist?: string;
  album?: string;
  cover: {
    filename?: string;
    format?: string;
    data?: string;
    type?: string;
  };
  title?: string;
  track?: number;
  genre?: string;
  year?: number;
  file_modified: Date;
  file_type: string;
  created_at?: Date;
  updated_at?: Date;
};

/**
 * Lean version of MediaDocument (type alias of `Media`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Media } from "../models"
 * import { MediaObject } from "../interfaces/mongoose.gen.ts"
 *
 * const mediaObject: MediaObject = media.toObject();
 * ```
 */
export type MediaObject = Media;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type MediaQuery = mongoose.Query<any, MediaDocument, MediaQueries> &
  MediaQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `MediaSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type MediaQueries = {};

export type MediaMethods = {};

export type MediaStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Media = mongoose.model<MediaDocument, MediaModel>("Media", MediaSchema);
 * ```
 */
export type MediaModel = mongoose.Model<MediaDocument, MediaQueries> &
  MediaStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Media schema instances:
 * ```
 * const MediaSchema: MediaSchema = new mongoose.Schema({ ... })
 * ```
 */
export type MediaSchema = mongoose.Schema<
  MediaDocument,
  MediaModel,
  MediaMethods,
  MediaQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Media = mongoose.model<MediaDocument, MediaModel>("Media", MediaSchema);
 * ```
 */
export type MediaDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  MediaQueries
> &
  MediaMethods & {
    _id: mongoose.Types.ObjectId;
    path: string;
    duration: number;
    artist?: string;
    album?: string;
    cover: {
      filename?: string;
      format?: string;
      data?: string;
      type?: string;
    };
    title?: string;
    track?: number;
    genre?: string;
    year?: number;
    file_modified: Date;
    file_type: string;
    created_at?: Date;
    updated_at?: Date;
  };

/**
 * Lean version of PlaylistDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PlaylistDocument.toObject()`. To avoid conflicts with model names, use the type alias `PlaylistObject`.
 * ```
 * const playlistObject = playlist.toObject();
 * ```
 */
export type Playlist = {
  _id: mongoose.Types.ObjectId;
  name: string;
  items: mongoose.Types.ObjectId[];
  created_at?: Date;
  updated_at?: Date;
};

/**
 * Lean version of PlaylistDocument (type alias of `Playlist`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Playlist } from "../models"
 * import { PlaylistObject } from "../interfaces/mongoose.gen.ts"
 *
 * const playlistObject: PlaylistObject = playlist.toObject();
 * ```
 */
export type PlaylistObject = Playlist;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type PlaylistQuery = mongoose.Query<
  any,
  PlaylistDocument,
  PlaylistQueries
> &
  PlaylistQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `PlaylistSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type PlaylistQueries = {};

export type PlaylistMethods = {};

export type PlaylistStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Playlist = mongoose.model<PlaylistDocument, PlaylistModel>("Playlist", PlaylistSchema);
 * ```
 */
export type PlaylistModel = mongoose.Model<PlaylistDocument, PlaylistQueries> &
  PlaylistStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Playlist schema instances:
 * ```
 * const PlaylistSchema: PlaylistSchema = new mongoose.Schema({ ... })
 * ```
 */
export type PlaylistSchema = mongoose.Schema<
  PlaylistDocument,
  PlaylistModel,
  PlaylistMethods,
  PlaylistQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Playlist = mongoose.model<PlaylistDocument, PlaylistModel>("Playlist", PlaylistSchema);
 * ```
 */
export type PlaylistDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  PlaylistQueries
> &
  PlaylistMethods & {
    _id: mongoose.Types.ObjectId;
    name: string;
    items: mongoose.Types.Array<mongoose.Types.ObjectId>;
    created_at?: Date;
    updated_at?: Date;
  };

/**
 * Lean version of ScanDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ScanDocument.toObject()`. To avoid conflicts with model names, use the type alias `ScanObject`.
 * ```
 * const scanObject = scan.toObject();
 * ```
 */
export type Scan = {
  status?: "ACTIVE" | "FAILED" | "COMPLETED";
  records_written?: number;
  created_at?: Date;
  updated_at?: Date;
  completed_at?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ScanDocument (type alias of `Scan`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Scan } from "../models"
 * import { ScanObject } from "../interfaces/mongoose.gen.ts"
 *
 * const scanObject: ScanObject = scan.toObject();
 * ```
 */
export type ScanObject = Scan;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ScanQuery = mongoose.Query<any, ScanDocument, ScanQueries> &
  ScanQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ScanSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ScanQueries = {};

export type ScanMethods = {};

export type ScanStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Scan = mongoose.model<ScanDocument, ScanModel>("Scan", ScanSchema);
 * ```
 */
export type ScanModel = mongoose.Model<ScanDocument, ScanQueries> & ScanStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Scan schema instances:
 * ```
 * const ScanSchema: ScanSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ScanSchema = mongoose.Schema<
  ScanDocument,
  ScanModel,
  ScanMethods,
  ScanQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Scan = mongoose.model<ScanDocument, ScanModel>("Scan", ScanSchema);
 * ```
 */
export type ScanDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ScanQueries
> &
  ScanMethods & {
    status?: "ACTIVE" | "FAILED" | "COMPLETED";
    records_written?: number;
    created_at?: Date;
    updated_at?: Date;
    completed_at?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  email: string;
  type?: "admin" | "user";
  auth: {
    id?: string;
    name?: string;
    email?: string;
    access_token?: string;
    type?: "google_oauth";
  };
  _id: mongoose.Types.ObjectId;
  updated_at?: Date;
  created_at?: Date;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type UserQuery = mongoose.Query<any, UserDocument, UserQueries> &
  UserQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `UserSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type UserQueries = {};

export type UserMethods = {};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<
  UserDocument,
  UserModel,
  UserMethods,
  UserQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    email: string;
    type?: "admin" | "user";
    auth: {
      id?: string;
      name?: string;
      email?: string;
      access_token?: string;
      type?: "google_oauth";
    };
    _id: mongoose.Types.ObjectId;
    updated_at?: Date;
    created_at?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any,
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>,
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
